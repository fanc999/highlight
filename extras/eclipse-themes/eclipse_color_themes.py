# -*- coding: utf-8 -*-
#!/usr/bin/python

import requests
import sys
import xml.etree.ElementTree as ET
from datetime import date

if __name__ == '__main__':
    
    if (len(sys.argv)!=2):
        print ("Please define the theme number to download from eclipsecolorthemes.org")
        sys.exit()

    themeID = sys.argv[1]

    print ("Retrieving Theme #%s..." % themeID)
    r = requests.get(
        'http://www.eclipsecolorthemes.org/',
        params=[('view', 'empty'), ('action', 'download'),('theme', themeID),('type', 'xml')],
    )

    root = ET.fromstring(r.text)

    url = r.url
    today = date.today()

    scheme = root.attrib['name']
    author = root.attrib['author']
    id = root.attrib['id']
    
    if (id==""):
        print ("This ID is not known.")
        sys.exit()

    canvas = root.find('background').attrib['color'] # Default Background
    default = root.find('foreground').attrib['color'] # Selection Background
    number = root.find('number').attrib['color'] # Comments, Invisibles, Line Highlighting
    operator = root.find('operator').attrib['color'] # Block Comments, Invisibles, Line Highlighting
    string = root.find('string').attrib['color'] # Dark Foreground (Used for status bars)
    escape = root.find('commentTaskTag').attrib['color'] # Default Foreground, Caret, Delimiters, Operators
    preprocessor = root.find('annotation').attrib['color'] # Light Foreground (Not often used)
    stringPreProc = root.find('javadocLink').attrib['color'] # Light Background (Not often used)
    interpolation = root.find('commentTaskTag').attrib['color'] # Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted
    lineComment = root.find('singleLineComment').attrib['color'] # Integers, Boolean, Constants, XML Attributes, Markup Link Url
    blockComment = root.find('multiLineComment').attrib['color'] # Classes, Markup Bold, Search Text Background
    lineNum = root.find('lineNumber').attrib['color'] # Strings, Inherited Class, Markup Code, Diff Inserted
    kwa = root.find('keyword').attrib['color'] # Support, Regular Expressions, Escape Characters, Markup Quotes
    kwb = root.find('method').attrib['color'] # Functions, Methods, Attribute IDs, Headings
    kwc = root.find('interface').attrib['color'] # Keywords, Storage, Selector, Markup Italic, Diff Changed
    kwd = root.find('field').attrib['color'] # Deprecated, Opening/Closing Embedded Language Tags, e.g. <?php ?>
    kwe = root.find('staticField').attrib['color'] # Deprecated, Opening/Closing Embedded Language Tags, e.g. <?php ?>
    kwf = root.find('localVariable').attrib['color'] # Deprecated, Opening/Closing Embedded Language Tags, e.g. <?php ?>

    theme = """--[[%s | Theme generated by eclipse_color_themes.py
================================================================================
Author:   %s
Source:   %s
================================================================================]]
Description = "Eclipse #%s (%s)"

Categories = { "eclipse"}

--------------------------------------------------------------------------------
Canvas         = { Colour = "%s", Italic = false, Bold = false }

Default        = { Colour = "%s", Italic = false, Bold = false }

Number         = { Colour = "%s", Italic = false, Bold = false }

Operator       = { Colour = "%s", Italic = false, Bold = false }

String         = { Colour = "%s", Italic = false, Bold = false }

Escape         = { Colour = "%s", Italic = false, Bold = false }

StringPreProc  = { Colour = "%s", Italic = false, Bold = false }

Interpolation  = { Colour = "%s", Italic = false, Bold = false }

LineComment    = { Colour = "%s", Italic = false,  Bold = false }

BlockComment   = { Colour = "%s", Italic = false,  Bold = false }

LineNum        = { Colour = "%s", Italic = false, Bold = false }

PreProcessor   = { Colour = "%s", Italic = false, Bold = false }

Keywords = {
  { Colour = "%s", Italic = false, Bold = true  }, --> kwd 1
  { Colour = "%s", Italic = false, Bold = true  }, --> kwd 2
  { Colour = "%s", Italic = false, Bold = true  }, --> kwd 3
  { Colour = "%s", Italic = false, Bold = true  }, --> kwd 4
  { Colour = "%s", Italic = false, Bold = true  }, --> kwd 5
  { Colour = "%s", Italic = false, Bold = true  }, --> kwd 6
}
""" % (today, author, url, id, scheme,
        canvas, default, number, operator, string, escape, stringPreProc,
        interpolation, lineComment, blockComment, lineNum, preprocessor,
        kwa, kwb, kwc, kwd, kwe, kwf)

    themeName = '%s.theme' %  "_".join(scheme.lower().split())

    print ("Saving Highlight Theme File %s..." % themeName)

    f = open(themeName, 'w')
    f.write(theme)
    f.close()
